# 📚 Sistema de Gestão de Biblioteca

## 🎯 Objetivo do Projeto
Desenvolver um sistema de consola para a gestão de bibliotecas, com funcionalidades como registo e listagem de livros, empréstimos, devoluções e gestão de utilizadores.

---

## 🛠️ Tecnologias Utilizadas

- **Linguagem:** C#
- **Base de Dados:** SQLite
- **ORM/Query Mapper:** Dapper
- **Arquitetura:** Camadas + DDD (Domain-Driven Design)
- **IDE:** Visual Studio / Visual Studio Code
- **Paradigmas:** Programação Orientada a Objetos (POO)

---

## 🧱 Estrutura Geral do Projeto

(estrutura de pastas) 
GestaoBlibioteca/ ├── aplicacao/ # Serviços de aplicação (casos de uso) ├── dominio/ # Entidades, interfaces e regras de negócio ├── infra/ # Persistência de dados com Dapper ├── ui/ # Interface de consola ├── docs/ # Documentação do projeto ├── Program.cs # Ponto de entrada



>>>>>estrutura de pastas e ficheiros do projeto GestaoBlibioteca/. Cada pasta tem uma responsabilidade clara dentro da arquitetura em camadas com DDD (Domain-Driven Design). Aqui está a explicação:

📁 GestaoBlibioteca/
Diretório principal do projeto.

📁 aplicacao/
Função: Camada de aplicação — aqui moram os serviços de aplicação que orquestram os casos de uso.

Exemplo: AppServiceLivros, AppServiceEmprestimos, etc.

Cada classe desta camada não implementa regras de negócio diretamente, mas sim chama os métodos do domínio (entidades) e comunica com os repositórios.

Exemplo real: Quando um utilizador quer emprestar um livro, esta camada coordena o processo: valida o utilizador, verifica disponibilidade, chama o domínio e grava na BD.

📁 dominio/
Função: Camada de domínio — o coração do sistema.

Contém as entidades principais (como Livro, Usuario, Emprestimo, etc.)

Define também as interfaces dos repositórios (IRepositorioLivros, etc.)

Aqui estão as regras de negócio puras, ou seja, lógicas que não dependem de frameworks ou tecnologia externa.

Esta camada é o núcleo: independente de BD, consola ou UI gráfica.

📁 infra/
Função: Camada de infraestrutura — responsável pela persistência dos dados.

Contém as implementações concretas dos repositórios definidos nas interfaces do domínio.

Usa Dapper para comunicar com a base de dados SQLite (SQL puro).

Exemplo: RepositorioLivrosDapper implementa IRepositorioLivros.

📁 ui/
Função: Camada de interface de utilizador (neste caso, consola).

Contém os menus, inputs e outputs visuais para o utilizador interagir com o sistema.

Traduz ações do utilizador em chamadas à camada de aplicação.

📁 docs/
Função: Pasta opcional para guardar documentação do projeto.

Pode conter: requisitos, diagramas, explicações técnicas, relatórios, etc.

📄 Program.cs
Função: Ponto de entrada do programa.

Aqui começa a execução do sistema.

É onde se inicializa a aplicação, se configuram os serviços, e se lança a UI.

🧠 Resumo Visual da Responsabilidade:
Camada	Responsabilidade Principal	Exemplos
aplicacao/	Coordena os casos de uso	AppServiceLivros
dominio/	Lógica de negócio e entidades	Livro, Usuario, IRepositorioLivros
infra/	Acesso e persistência dos dados	RepositorioLivrosDapper
ui/	Interação com o utilizador (menus, consola)	MenuPrincipal.cs
docs/	Documentação adicional	requisitos.md, diagramas
Program.cs	Início do programa	Main(), instanciar serviços e UI

-----
----
---
--
-
## 🧬 Arquitetura do Projeto

- **Camada UI:** Interface com o utilizador  
- **Camada Aplicação:** Coordena os casos de uso  
- **Camada Domínio:** Contém as regras e lógica de negócio  
- **Camada Infraestrutura:** Implementação dos repositórios e persistência  
- **Padrão:** Domain-Driven Design (DDD)  

---

## 🗃️ Método de Criação da Base de Dados

- Base de dados local SQLite  
- Utilização de **Dapper** para executar SQL puro  
- Tabelas criadas diretamente por código (sem migrations automáticas)  

---

## ⚙️ Serviços da Aplicação

- `AppServiceLivros`  
- `AppServiceUsuarios`  
- `AppServiceExemplares`  
- `AppServiceEmprestimos`  

> Responsáveis por coordenar os casos de uso, aplicar regras e comunicar com os repositórios.

---

## 🧠 Domínios

- **Entidades:**
  - `Livro`
  - `Usuario`
  - `Exemplar`
  - `Emprestimo`
- Contêm lógica de negócio encapsulada e validada internamente

---

## ❗ Exceções

- Exceções personalizadas para controlo de erros:
  - `UsuarioNaoEncontradoException`
  - `LivroIndisponivelException`
- Facilitam o tratamento claro e específico de erros da aplicação

---

## 🧪 Interfaces

- Interfaces de repositório definidas no domínio:
  - `IRepositorioUsuarios`, `IRepositorioLivros`, etc.
- Facilitam a injeção de dependência e desacoplamento de lógica

---

## 🔄 Polimorfismos

- Uso de interfaces permite múltiplas implementações de repositórios  
- Métodos comuns como `Adicionar()`, `BuscarPorId()` podem variar sem mudar o código cliente  

---

## 🔐 Encapsulamento

- Propriedades privadas com acesso controlado por métodos  
- Estados internos protegidos contra alterações indevidas  
- Regras de negócio aplicadas apenas onde faz sentido (domínio)  

---

## 🔁 Fluxo de Funcionalidades (Exemplo: Empréstimo)

1. Utilizador seleciona a opção de emprestar livro na UI  
2. `AppServiceEmprestimos` verifica se o livro e o utilizador existem  
3. Validação de disponibilidade do exemplar  
4. Criação e registo do empréstimo na BD via repositório  
5. Mensagem de sucesso na consola  

---

## 🚧 Desafios Enfrentados

- Integração de SQLite com Dapper  
- Organização de camadas e responsabilidades  
- Validação de regras complexas (ex: não emprestar livro já emprestado)  

---

## 🔮 Melhorias Futuras

- Interface gráfica (WinForms/WPF ou versão Web)  
- Geração de relatórios PDF  
- Sistema de notificações e penalizações por atraso  
- Exportação/importação de dados  

---

## 🧠 Lições Aprendidas

- Aplicação prática de DDD em C#  
- Importância da separação de responsabilidades  
- Criação de soluções reutilizáveis e testáveis  
- Uso eficaz de interfaces e exceções personalizadas  

---

## 🙌 Obrigada!
Qualquer dúvida, fico à disposição para mostrar o código e explicar as decisões.


