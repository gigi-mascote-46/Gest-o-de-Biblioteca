🏗️ Estrutura Geral do Projeto
O projeto segue uma arquitetura em camadas, com as seguintes divisões principais:

aplicacao/servicos: Serviços da camada de aplicação (intermedia a lógica de domínio)

dominio/enums, dominio/excecoes: Enumerações e exceções específicas do domínio

infraestrutura/, persistencia/: Implementações de persistência e configuração

UI/: Interfaces de utilizador (provavelmente em modo consola)

📦 Alguns Ficheiros-Chave por Categoria
🔧 Serviços da Aplicação
AppServiceEmprestimos.cs

AppServiceExemplares.cs

AppServiceLivros.cs

AppServiceUsuarios.cs

Estes serviços intermediam entre a UI e a lógica de domínio, delegando ações como registo, empréstimos, devoluções, etc.

🧩 Domínio
IUnidadeDeTrabalho.cs: Interface para gestão de transações (padrão Unit of Work)

Role.cs: Enumeração de tipos de utilizador (ex: Administrador, Leitor)

Exceções:

EmprestimoJaDevolvido.cs

EmprestimoNaoEncontrado.cs

ExemplarIndisponivel.cs

Agora vou analisar cada um destes ficheiros para identificar:

Classes, métodos e atributos

Enums e valores associados

Responsabilidades principais

Já volto com um resumo detalhado por categoria! 🔍📘 ​​

Aqui está o resumo da classe AppServiceEmprestimos, um dos principais componentes da camada de aplicação:

📘 Classe: AppServiceEmprestimos
Localização: aplicacao/servicos/AppServiceEmprestimos.cs
Namespace: Biblioteca.Aplicacao.Servicos
Tipo: public class

🧭 Função Principal:
Atua como orquestrador dos casos de uso de empréstimos, coordenando chamadas entre:

Repositórios de livros, usuários, exemplares e empréstimos

Unidade de trabalho (transações)

Serviço de domínio GestorDeEmprestimos

📌 Importante: Não contém lógica de negócio — apenas coordena componentes para realizar operações.

🔧 Injeções (Campos Privados):
IRepositorioLivros _repositorioLivros

IRepositorioUsuarios _repositorioUsuarios

IRepositorioExemplares _repositorioExemplares

IRepositorioEmprestimos _repositorioEmprestimos

IUnidadeDeTrabalho _unidadeDeTrabalho

GestorDeEmprestimos _gestorDeEmprestimos

Essas dependências são todas injetadas no construtor, promovendo baixo acoplamento e alta coesão.

